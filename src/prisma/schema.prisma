// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String          @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  Gallery      Gallery[]
  UserMetadata UserMetadata?
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userMetadata   UserMetadata? @relation(fields: [userMetadataId], references: [id], onDelete: Cascade)
  userMetadataId String?       @unique @db.ObjectId // Ensure uniqueness

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model GalleryCategory {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  galleryId String @db.ObjectId

  Gallery              Gallery                @relation(fields: [galleryId], references: [id])
  GalleryCategoryImage GalleryCategoryImage[]
}

model UserMetadata {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  username    String  @unique
  bannerImage String?
  whatsapp    String?
  instagram   String?
  aboutImage  String?
  aboutText   String?
  logo        String?
  userId      String  @unique @db.ObjectId // Ensure 1:1 relationship

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Account Account?
}

model Gallery {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  bannerImage String[]
  title       String
  userId      String   @db.ObjectId
  date        DateTime
  isPublished Boolean
  slug        String   @unique

  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  GalleryCategory GalleryCategory[]
}

model GalleryCategoryImage {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl   String
  categoryId String @db.ObjectId

  GalleryCategory GalleryCategory @relation(fields: [categoryId], references: [id])
}
