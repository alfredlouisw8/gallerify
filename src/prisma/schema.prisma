// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?
  username       String          @unique
  emailVerified  DateTime?
  password       String
  image          String?
  userMetadataId String          @db.ObjectId
  accounts       Account[]
  sessions       Session[]
  Authenticator  Authenticator[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  UserMetadata UserMetadata @relation(fields: [userMetadataId], references: [id])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Category {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  galleryId String @db.ObjectId

  Gallery      Gallery        @relation(fields: [galleryId], references: [id])
  GalleryImage GalleryImage[]
}

model UserMetadata {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  bannerImage String
  whatsapp    String
  instagram   String
  aboutImage  String
  aboutText   String
  logo        String

  User User[]
}

model Gallery {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  bannerImage String[]
  title       String

  Category Category[]
}

model GalleryImage {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl   String
  categoryId String @db.ObjectId

  Category Category @relation(fields: [categoryId], references: [id])
}
